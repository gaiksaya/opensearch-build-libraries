/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

plugins {
    id 'com.mkobit.jenkins.pipelines.shared-library' version '0.10.1'
    id 'java'
    id 'groovy'
    id 'jacoco'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven { url 'https://repo.jenkins-ci.org/releases/' }
    maven { url 'https://mvnrepository.com/artifact/' }
    mavenLocal()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.15', ext: 'pom'
    implementation group: 'com.cloudbees', name: 'groovy-cps', version: '1.31'
    testImplementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'com.lesfurets', name:'jenkins-pipeline-unit', version: '1.24'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.12.0'
}

configurations.all {
    resolutionStrategy {
        force group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
        force group: 'commons-codec', name: 'commons-codec', version: '1.15'
        force group: 'com.google.protobuf', name: 'protobuf-java', version: '3.25.5'
        force group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.18.0'
        force group: 'org.checkerframework', name: 'checker-qual', version: '3.33.0'
        force group: 'com.google.j2objc', name: 'j2objc-annotations', version: '2.8'
        force group: 'org.jenkins-ci.plugins', name: 'durable-task', version: '547.vd1ea_007d100c'
    }
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/jenkins', 'src/gradlecheck', 'src/utils']
        }
    }

    test {
        groovy {
            srcDirs = ['tests/jenkins', 'tests/gradlecheck']
        }
    }

    jobs {
        groovy {
            srcDirs 'src/jenkins/jobs'
            compileClasspath += main.compileClasspath
        }

        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

sharedLibrary {
    coreVersion = '2.426.3' // https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-core/
    testHarnessVersion = '2085.va_c531db_287b_d' // https://mvnrepository.com/artifact/org.jenkins-ci.main/jenkins-test-harness?repo=jenkins-releases
    pluginDependencies {
        workflowCpsGlobalLibraryPluginVersion = '570.v21311f4951f8' // https://repo.jenkins-ci.org/public/org/jenkins-ci/plugins/workflow/workflow-cps-global-lib/
        // see https://mvnrepository.com/artifact/org.jenkins-ci.plugins/<name>?repo=jenkins-releases for latest
        dependency('org.jenkins-ci.plugins.workflow', 'workflow-cps', '3606.v0b_d8b_e512dcf')
        dependency('org.jenkins-ci.plugins.workflow', 'workflow-multibranch', '2.26.1')
        dependency('org.jenkins-ci.plugins', 'pipeline-input-step', '456.vd8a_957db_5b_e9') // https://repo.jenkins-ci.org/public/org/jenkins-ci/plugins/pipeline-input-step/
        dependency('org.jenkins-ci.plugins', 'script-security', '1229.v4880b_b_e905a_6')
        dependency('org.jenkins-ci.plugins', 'credentials', '1112.vc87b_7a_3597f6')
        dependency('org.jenkins-ci.plugins', 'git-client', '3.11.1')
        dependency('org.jenkins-ci.plugins', 'junit', '1316.v13ec14a_de230')
        dependency('org.jenkins-ci.plugins', 'mailer', '408.vd726a_1130320') // https://repo.jenkins-ci.org/public/org/jenkins-ci/plugins/mailer/
    }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    if (project.hasProperty('pipeline.stack.write')) {
        systemProperty 'pipeline.stack.write', project.getProperty('pipeline.stack.write')
    }

    jacoco {
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    dependsOn test

    sourceSets sourceSets.main

    afterEvaluate {
        classDirectories.from = fileTree(
                dir: "$buildDir/jacoco/classpathdumps",
                includes: [
                        '**/*_Jenkinsfile.*',
                        '**/jenkins/*',
                        '**/gradlecheck/*',
                        '**/utils/*'
                ],
                excludes: [
                        '**/*\$_get_closure*',
                        '**/*\$_*closure*'
                ]
        )
    }
    //     afterEvaluate {
    //     /*
    //      * There are 2 location where the ".class" files exist:
    //      * 1) "$buildDir/jacoco/classpathdumps": This is where jacoco puts the class files which have been triggered by
    //      *    the tests.
    //      * 2) "$buildDir/classes/groovy/main": This is where gradle places all the class files during compilation
    //      *
    //      * It should be enough to just include the file tree from (1) above. However, this will result in not
    //      * considering any of the files which has not been tested.
    //      * In order to consider those as well, we add the class files from (2) as well. However, if we try to add the
    //      * same class multiple times, jacoco will complain. Therefore, we need to add all the files from (1), and the
    //      * files from (2) which are not in (1) already.
    //      */
    //     String jacocoClassesPath = "$buildDir/jacoco/classpathdumps"
    //     String gradleClassesPath = "$buildDir/classes/groovy/main"
    //     // The single "*" here indicates the "default" package which in our case is the "vars" dir
    //     List includesList = [
    //                     '**/*_Jenkinsfile.*',
    //                     '**/jenkins/*',
    //                     '**/gradlecheck/*',
    //                     '**/utils/*'
    //             ]
    //     List excludesList = [
    //                     '**/*\$_get_closure*',
    //                     '**/*\$_*closure*'
    //             ]

    //     List allTrees = [
    //         fileTree(dir: jacocoClassesPath, includes: includesList, excludes: excludesList),
    //         fileTree(dir: gradleClassesPath, includes: includesList, excludes: excludesList).filter { f ->
    //             /*
    //              * In this filter, we want to remove all the files which were already covered by jacoco in the first
    //              * `fileTree` above. This filter is only executed after the tests have completed while jacoco is
    //              * generating the reports. Therefore, we cannot find the files list earlier. Although here were are
    //              * finding the files list multiple times (for each file `f`), this is still acceptable because number of
    //              * files are limited anyway.
    //              */
    //             // This list will collect all the ".class" files from jacoco classes path folder
    //             List fs = new File(jacocoClassesPath).listFiles().findAll { it.name.endsWith(".class") }
    //             /*
    //              * Next we need to keep only the file name (without path). Additionally, jacoco adds a session ID to the
    //              * file name (e.g. something.class would look something like something.93153c79e479a123.class). What we
    //              * are interested in here is only the "something.class" without the session ID.
    //              * The `toString()` is also required otherwise the `.contains()` we do next will be comparing a G-String
    //              * to a String and not match.
    //              */
    //             fs = fs.collect { "${it.name.split('\\.')[0]}.class".toString() }
    //             // We only want to consider the current file `f` if its name does not already exist in `fs`.
    //             boolean keepFile = !fs.contains(f.name)
    //             /*
    //              * XXX - it's enough to just return the value of `keepFile` without deletion but we do so to simplify
    //              * the call to the jacoco plugin from Jenkins. If we don't do so, we'll need to do the filtering again
    //              * from Jenkinsfile as well.
    //              */
    //             if (!keepFile) {
    //                 f.delete()
    //             }
    //             return keepFile
    //         },
    //     ]
    //     classDirectories.from = allTrees
    // }

    reports {
        xml.required = true
    }
}

String version = '8.2.1'

task updateVersion {
    doLast {
        println "Setting version to ${version} in all libraries"
        ant.replaceregexp(match:'jenkins@main', replace: 'jenkins@' + version, flags: 'g') {
            fileset(dir: projectDir) {
                include (name: "vars/**")
                include (name: "tests/**")
            }
        }
    }
}
